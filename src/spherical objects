[spherical geometry: understanding mathematical, geophysical, computational aspects of the structure in question]
[-1] I will end this series with the complete understanding of all things that I would want to know (have to know) about spherical structures.
[-0] key topics that I will be arriving shortly are (spherical harmonics, hemispheric harmonics, hyperspherical coordinate system]

[divergent: a quick idea to be shared]
[-1] these are the elements to ultimately avoid: (typing on keyboard, moving mouse pointers, clicking excessively with switching between left/right clicks, staring at the screen of monitor, running multiple processes and switching simultaneously, actively participating in a window while other parallel attentional queues are available]
[-0] these are the ideal replacement: (headphones connected to controlled streaming process, directing processes and attentional requirements through passive commands, using nothing but a fixed frame elements while headphone is transferring energy, learn auditory mappings of visual features to substitute screen time, a routine that would manage finite set of tasks and determine transitions through passive modes of attention]
[+0] see if these tasks can be substituted: (opening and manipulating terminal interface, compose strings of text or chains of predefined actions through non-motor activities, refer to background tasks from focused window, formatting structured inputs via small number of switching operations, searching for information and remotely adapting possible yields into a focused context window, create a complete mapping of equivalent cycles starting from terminal environment to executable scripts]
[+1] i can speak to translate directly into characters or create abstract control panel with elements that map pre designed actions to triggers of elements, then I can learn a set of features restricted to finite degrees of freedom such that the environment causes the executive controls to translate successfully into encoded actions.

[adaptive computation: learning block]
[-1] start the script at local path and a recurrent cell will be running in the background
[-0] total number of files, total memory cost, maps of address blocks and file content buffer enlisted
[+0] recurrent cell enters one of the buffers and samples n tokens
[+1] for n sampled tokens, the cell produces output which gets linked to visited paths

[-1] each cell tries to copy the source contents
[-0] learned cell could reproduce the source text
[0+] reproduction score determines the proportion of reconstitution area
[1+] maximum reconstitution replaces the memory content with cell code
