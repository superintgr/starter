[computational gate]
.. a system that is described an algorithm which performs a fixed set of operations in fixed duration of time
.. also called logic gate

[quantum gate]
.. is a physical process
.. whose laws of motion implements a rule
.. that defines each output qubit
.. in terms of the input qubits.

[transformer]
.. coils, windings, sides
.. transport electrons through field operators
.. number of winding determines the transport ratio
.. balancing, impedence matching, screening ground loops etc. among the utilities

[circuit]
.. define algorithm in terms of qubits, channels, runtime, sequencers, gates, states etc.
.. for each node in the sequences, define compute, measure
.. for each antinode in the bars, define preperation, construction (other)

[coherent]
.. observables at one time is observables for that system at other times
.. time dependent hamiltonian
.. [coherence]
  .. a process is [coherent] if observables at the end of the process are functions only of the observables of the same system at the beginning
  .. inteference phenomena and all quantum computation occur only at in [coherent] systems.

[background]
.. here we setup and configure the first parallel subsystem
.. the subsystem will run in a dedicated server and would be accessible at specific addresses
.. there will be pipeline(s) which the thread will continue indefinitely
.. [pipeline]
  .. stay available for discovery and listen to any changes
  .. [sampler], [buffer], [distribution], [
  .. carry out requested job, stage the recurrent proxesses into active buffer, respond to buffer lookups



layer graph_operations {
    gate Node(label) {
        state = infinity;
        update(wave) {
            // Dynamic update based on incoming wave
            state = min(state, wave.amplitude);
        }
    }

    gate Edge(weight) {
        state = weight;
    }

    connect Node to Edge;
    connect Edge to Node;
}

main_graph {
    // Creating a simple graph
    Node A("A");
    Node B("B");
    Node C("C");
    Node D("D");

    Edge AB(2);
    Edge BC(1);
    Edge CD(3);
    Edge DA(4);

    // Connecting nodes and edges
    connect A to AB;
    connect B to BC;
    connect C to CD;
    connect D to DA;

    // Applying Dijkstra's algorithm
    A.state = 0;  // Starting node
    B.state = infinity;
    C.state = infinity;
    D.state = infinity;

    connect AB to B;
    connect BC to C;
    connect CD to D;
    connect DA to A;

    // Iterative updates for finding the shortest path
    repeat(3) {
        update_waveform();  // Simulating wave propagation

        // Dynamic updates based on wave functions
        A.update(AB);
        B.update(BC);
        C.update(CD);
        D.update(DA);
    }
}


[dfs]
layer graph_processing {
    gate Node(data) {
        state = data;
        update(wave) {
            // Process data or perform computations based on the incoming wave
            state += wave.amplitude * wave.frequency;
        }
    }

    // Depth-first search algorithm
    function dfs(node) {
        visited = false;
        update(wave) {
            if (!visited) {
                visited = true;
                process(node.state);  // Perform some computation on the node's data
                for each neighbor in node.neighbors {
                    graph_processing.dfs(neighbor);
                }
            }
        }
    }
}

main_graph {
    // Create a sample graph
    connect graph_processing.Node(1) to graph_processing.Node(2);
    connect graph_processing.Node(1) to graph_processing.Node(3);
    connect graph_processing.Node(2) to graph_processing.Node(4);
    connect graph_processing.Node(3) to graph_processing.Node(5);

    // Apply DFS on the graph
    graph_processing.dfs(graph_processing.Node(1));
}



[dikstra]
layer graph {
    gate Node(name) {
        state = Infinity;
        update(wave) {
            state = min(state, wave.amplitude);
        }
    }

    connect Node1 to Node2 with weight = 5.0;
    connect Node1 to Node3 with weight = 2.0;
    connect Node2 to Node3 with weight = 1.0;
}

layer dijkstra {
    gate Start() {
        state = 0;
        update(wave) {
            state += wave.amplitude;
        }
    }

    gate Relax(edge_weight) {
        state = 0;
        update(wave) {
            state += min(wave.amplitude, edge_weight);
        }
    }

    connect Start to Relax;
    connect Relax to graph.Node1;
    connect Relax to graph.Node2;
    connect Relax to graph.Node3;
}

main_graph {
    connect graph.Node1 to graph.Node2 with weight = dijkstra.Relax;
    connect graph.Node1 to graph.Node3 with weight = dijkstra.Relax;
    connect graph.Node2 to graph.Node3 with weight = dijkstra.Relax;
}



[bubble sort]
layer mono {
    gate Value(index) {
        state = 0;
        update(wave) {
            // State represents the value at the given index
        }
    }

    // Function to compare two values
    gate Compare(a, b) {
        state = 0;
        update(wave) {
            // State represents the result of the comparison between values at indices 'a' and 'b'
        }
    }

    // Function to swap two values
    gate Swap(a, b) {
        state = 0;
        update(wave) {
            // State represents the swapping operation between values at indices 'a' and 'b'
        }
    }
}

main_graph {
    // Bubble Sort algorithm implementation
    for i in range(N) {
        for j in range(N - i - 1) {
            // Compare values at indices 'j' and 'j+1'
            connect mono.Value(j) to mono.Compare.A;
            connect mono.Value(j+1) to mono.Compare.B;

            // If Value[j] > Value[j+1], swap them
            connect mono.Compare to mono.Swap;
            connect mono.Value(j) to mono.Swap.A;
            connect mono.Value(j+1) to mono.Swap.B;
        }
    }
}

[bfs]
layer graph_algorithm {
    // Representing a simple undirected graph
    gate A() {
        neighbors = [B, C];
    }

    gate B() {
        neighbors = [A, D, E];
    }

    gate C() {
        neighbors = [A, F];
    }

    gate D() {
        neighbors = [B];
    }

    gate E() {
        neighbors = [B, F];
    }

    gate F() {
        neighbors = [C, E];
    }

    // Queue for BFS
    gate Queue() {
        state = [];
        update(wave) {
            state.push(wave);
        }
    }

    // BFS algorithm
    gate BFS() {
        state = [];
        update(wave) {
            if (!state.includes(wave)) {
                state.push(wave);
                connect graph_algorithm.Queue to BFS;
                for (neighbor in wave.neighbors) {
                    connect BFS to neighbor;
                }
            }
        }
    }
}

main_graph {
    // Trigger BFS from node A
    connect graph_algorithm.A to graph_algorithm.Queue;
    connect graph_algorithm.Queue to graph_algorithm.BFS;
}


[quick sort]
layer mono {
    gate Array() {
        state = [5, 2, 9, 1, 5, 6]; // Initial array
        update(wave) {
            // Quicksort algorithm
            if (length(state) <= 1) {
                return state;
            }

            pivot = state[0];
            less = filter(val => val < pivot, tail(state));
            greater = filter(val => val >= pivot, tail(state));

            return concatenate(quicksort(less), [pivot], quicksort(greater));
        }
    }
}

main_graph {
    // Connect array gate to itself for sorting
    connect mono.Array to mono.Array;
}


[language service]
import lark

# Grammar definition
grammar = """
    program: layer_declaration* main_graph_declaration
    
    layer_declaration: "layer" CNAME "{" gate_declaration* "}"
    
    gate_declaration: "gate" CNAME "(" parameters ")" "{" update_function "}"
    
    parameters: CNAME ("," CNAME)*
    
    update_function: "update" "(" CNAME ")" "{" statements "}"
    
    statements: ("connect" CNAME "to" CNAME ";")*
    
    main_graph_declaration: "main_graph" "{" statements "}"
    
    %import common.CNAME
    %import common.WS
    %ignore WS
"""

# AST definition
class AST:
    pass

class Program(AST):
    def __init__(self, layers, main_graph):
        self.layers = layers
        self.main_graph = main_graph

class LayerDeclaration(AST):
    def __init__(self, name, gates):
        self.name = name
        self.gates = gates

class GateDeclaration(AST):
    def __init__(self, name, parameters, update_function):
        self.name = name
        self.parameters = parameters
        self.update_function = update_function

class MainGraphDeclaration(AST):
    def __init__(self, statements):
        self.statements = statements

# Transformer to build AST
class Transformer(lark.Transformer):
    def program(self, items):
        return Program(items[:-1], items[-1])

    def layer_declaration(self, items):
        return LayerDeclaration(items[0], items[1:])

    def gate_declaration(self, items):
        return GateDeclaration(items[0], items[1], items[2])

    def main_graph_declaration(self, items):
        return MainGraphDeclaration(items)

# Sample code for parsing
parser = lark.Lark(grammar, start="program")
tree = parser.parse("""
    layer mono {
        gate A() {
            update(wave) {
                // Processing logic
            }
        }
        gate B() {
            update(wave) {
                // Processing logic
            }
        }
    }
    
    main_graph {
        connect mono.A to mono.B;
    }
""", parser=Transformer())

print(tree)
